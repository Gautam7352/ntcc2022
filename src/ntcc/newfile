package ntcc;

public class Main {

    static int time = 1;

    static float deadline_closeness(float time, float deadline) {
        return deadline / time;
    }

    static float task_weight(float taskweight, float maxweight) {
        return taskweight / maxweight;
    }

    public static void main(String[] args) {
        System.out.println("There are 5 tasks in the queue");
        Tasks[] queue = new Tasks[5];
        Tasks[] tasklist = new Tasks[5];
        int queuefill = -1;

        for (int i = 0; i < 5; i++) {
            tasklist[i] = new Tasks();
        }
        {

            System.out.println("*******Burst time data*******");
            tasklist[0].burst_time = 5;
            tasklist[1].burst_time = 2;
            tasklist[2].burst_time = 6;
            tasklist[3].burst_time = 7;
            tasklist[4].burst_time = 4;
            for (int i = 0; i < 5; i++) {
                System.out.println(tasklist[i].burst_time);
            }

            System.out.println("*******Arrival time data*******");
            tasklist[0].arrival_time = 1;
            tasklist[1].arrival_time = 2;
            tasklist[2].arrival_time = 3;
            tasklist[3].arrival_time = 4;
            tasklist[4].arrival_time = 6;
            for (int i = 0; i < 5; i++) {
                System.out.println(tasklist[i].arrival_time);
            }

            System.out.println("*******Deadline time data*******");
            tasklist[0].deadline = 8;
            tasklist[1].deadline = 10;
            tasklist[2].deadline = 10;
            tasklist[3].deadline = 15;
            tasklist[4].deadline = 20;
            for (int i = 0; i < 5; i++) {
                System.out.println(tasklist[i].deadline);
            }

            System.out.println("*******Membership type data*******");
            tasklist[0].membership_type = 0.5f;
            tasklist[1].membership_type = 1.0f;
            tasklist[2].membership_type = 0.0f;
            tasklist[3].membership_type = 0.0f;
            tasklist[4].membership_type = 0.5f;
            for (int i = 0; i < 5; i++) {
                System.out.println(tasklist[i].membership_type);
            }
        }
        for (;; ++time) {
            // arrival time test
            for (int k = 0; k < 5; k++) {
                if (tasklist[k].arrival_time == time) {
                    queuefill++;
                    queue[queuefill] = tasklist[k];
                }
            }
            int i = 0;
            //priority setting
            if (queue[0] != null) {
                i = priority(queue);
                //waiting time update
                for (int j = 0; j < 5; j++) {
                    if (j == i) {
                        queue[j].burst_time--;
                        break;
                    } else {
                        queue[j].waiting_time++;
                    }
                    
                }
                //removing unnecessary tasks from queue
                for (int j = 0; j < 5; j++) {
                    System.out.println("hi"+time);
                    if (queue[j].burst_time == 0 || queue[j].deadline == time) {
                        
                        for (int k = j; k < 5; k++) {
                            if (k == 4) {
                                queue[k] = null;
                            } else {
                                queue[k] = queue[k + 1];
                            }
                        }
                    }
                break;}

            }
        }
    }

    public static int priority(Tasks[] queue) {
        double priority[] = new double[5];
        double temp = 0;
        int maxpriority = queue[0].burst_time;
        int maxweight = 0;
        for (int i = 0; i < 5; i++) {
            if (temp < priority[i]) {
                temp = priority[i];
                if (queue[i] != null) {
                    maxweight = queue[i].burst_time;
                }
            }
        }

        for (int i = 0; i < 5; i++) {
            if (queue[i] != null) {
                priority[i] = (queue[i].membership_type + queue[i].waiting_time + task_weight(queue[i].burst_time, maxweight) + deadline_closeness(time, queue[i].deadline)) / 4;
            }
        }

        for (int i = 0; i < 5; i++) {
            if (temp < priority[i]) {
                temp = priority[i];
                maxpriority = i;
            }

        }
        return maxpriority;
    }
}
